"""
Divide labeled unseen samples into seen tasks and unseen tasks.

Parameters
----------
task_index: str or Dict
    knowledge base index which includes indexes of 
    tasks, samples, models, etc.

Returns
-------
seen_task_samples: seen samples, see `sedna.datasources.BaseDataSource`
for more detail
unseen_task_samples: unseen samples, see `sedna.datasources.BaseDataSource`
for more detail
"""

from sedna.common.file_ops import FileOps
from sedna.datasources import BaseDataSource


class BaseSampleReRegonition:
    # TODO: to be completed
    '''
    Divide labeled unseen samples into seen tasks and unseen tasks.

    Parameters
    ----------
    task_index: str or Dict
        knowledge base index which includes indexes of tasks, samples, models, etc.
    '''

    def __init__(self, task_index, **kwargs):
        if isinstance(task_index, str) and FileOps.exists(task_index):
            self.task_index = FileOps.load(task_index)
        else:
            self.task_index = task_index

    def __call__(self, samples: BaseDataSource):
        '''
        Parameters
        ----------
        samples: training samples

        Returns
        -------
        seen_task_samples: BaseDataSource
        unseen_task_samples: BaseDataSource
        '''

        raise NotImplementedError

