/*
Copyright The KubeEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubeedge/sedna/pkg/apis/sedna/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MultiEdgeTrackingServiceLister helps list MultiEdgeTrackingServices.
// All objects returned here must be treated as read-only.
type MultiEdgeTrackingServiceLister interface {
	// List lists all MultiEdgeTrackingServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MultiEdgeTrackingService, err error)
	// MultiEdgeTrackingServices returns an object that can list and get MultiEdgeTrackingServices.
	MultiEdgeTrackingServices(namespace string) MultiEdgeTrackingServiceNamespaceLister
	MultiEdgeTrackingServiceListerExpansion
}

// multiEdgeTrackingServiceLister implements the MultiEdgeTrackingServiceLister interface.
type multiEdgeTrackingServiceLister struct {
	indexer cache.Indexer
}

// NewMultiEdgeTrackingServiceLister returns a new MultiEdgeTrackingServiceLister.
func NewMultiEdgeTrackingServiceLister(indexer cache.Indexer) MultiEdgeTrackingServiceLister {
	return &multiEdgeTrackingServiceLister{indexer: indexer}
}

// List lists all MultiEdgeTrackingServices in the indexer.
func (s *multiEdgeTrackingServiceLister) List(selector labels.Selector) (ret []*v1alpha1.MultiEdgeTrackingService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultiEdgeTrackingService))
	})
	return ret, err
}

// MultiEdgeTrackingServices returns an object that can list and get MultiEdgeTrackingServices.
func (s *multiEdgeTrackingServiceLister) MultiEdgeTrackingServices(namespace string) MultiEdgeTrackingServiceNamespaceLister {
	return multiEdgeTrackingServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MultiEdgeTrackingServiceNamespaceLister helps list and get MultiEdgeTrackingServices.
// All objects returned here must be treated as read-only.
type MultiEdgeTrackingServiceNamespaceLister interface {
	// List lists all MultiEdgeTrackingServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MultiEdgeTrackingService, err error)
	// Get retrieves the MultiEdgeTrackingService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MultiEdgeTrackingService, error)
	MultiEdgeTrackingServiceNamespaceListerExpansion
}

// multiEdgeTrackingServiceNamespaceLister implements the MultiEdgeTrackingServiceNamespaceLister
// interface.
type multiEdgeTrackingServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MultiEdgeTrackingServices in the indexer for a given namespace.
func (s multiEdgeTrackingServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MultiEdgeTrackingService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultiEdgeTrackingService))
	})
	return ret, err
}

// Get retrieves the MultiEdgeTrackingService from the indexer for a given namespace and name.
func (s multiEdgeTrackingServiceNamespaceLister) Get(name string) (*v1alpha1.MultiEdgeTrackingService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("multiedgetrackingservice"), name)
	}
	return obj.(*v1alpha1.MultiEdgeTrackingService), nil
}
