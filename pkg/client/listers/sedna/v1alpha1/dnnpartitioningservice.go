/*
Copyright The KubeEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubeedge/sedna/pkg/apis/sedna/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DNNPartitioningServiceLister helps list DNNPartitioningServices.
// All objects returned here must be treated as read-only.
type DNNPartitioningServiceLister interface {
	// List lists all DNNPartitioningServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DNNPartitioningService, err error)
	// DNNPartitioningServices returns an object that can list and get DNNPartitioningServices.
	DNNPartitioningServices(namespace string) DNNPartitioningServiceNamespaceLister
	DNNPartitioningServiceListerExpansion
}

// dNNPartitioningServiceLister implements the DNNPartitioningServiceLister interface.
type dNNPartitioningServiceLister struct {
	indexer cache.Indexer
}

// NewDNNPartitioningServiceLister returns a new DNNPartitioningServiceLister.
func NewDNNPartitioningServiceLister(indexer cache.Indexer) DNNPartitioningServiceLister {
	return &dNNPartitioningServiceLister{indexer: indexer}
}

// List lists all DNNPartitioningServices in the indexer.
func (s *dNNPartitioningServiceLister) List(selector labels.Selector) (ret []*v1alpha1.DNNPartitioningService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DNNPartitioningService))
	})
	return ret, err
}

// DNNPartitioningServices returns an object that can list and get DNNPartitioningServices.
func (s *dNNPartitioningServiceLister) DNNPartitioningServices(namespace string) DNNPartitioningServiceNamespaceLister {
	return dNNPartitioningServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DNNPartitioningServiceNamespaceLister helps list and get DNNPartitioningServices.
// All objects returned here must be treated as read-only.
type DNNPartitioningServiceNamespaceLister interface {
	// List lists all DNNPartitioningServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DNNPartitioningService, err error)
	// Get retrieves the DNNPartitioningService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DNNPartitioningService, error)
	DNNPartitioningServiceNamespaceListerExpansion
}

// dNNPartitioningServiceNamespaceLister implements the DNNPartitioningServiceNamespaceLister
// interface.
type dNNPartitioningServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DNNPartitioningServices in the indexer for a given namespace.
func (s dNNPartitioningServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DNNPartitioningService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DNNPartitioningService))
	})
	return ret, err
}

// Get retrieves the DNNPartitioningService from the indexer for a given namespace and name.
func (s dNNPartitioningServiceNamespaceLister) Get(name string) (*v1alpha1.DNNPartitioningService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dnnpartitioningservice"), name)
	}
	return obj.(*v1alpha1.DNNPartitioningService), nil
}
