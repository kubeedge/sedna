/*
Copyright The KubeEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubeedge/sedna/pkg/apis/sedna/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ObjectSearchServiceLister helps list ObjectSearchServices.
// All objects returned here must be treated as read-only.
type ObjectSearchServiceLister interface {
	// List lists all ObjectSearchServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObjectSearchService, err error)
	// ObjectSearchServices returns an object that can list and get ObjectSearchServices.
	ObjectSearchServices(namespace string) ObjectSearchServiceNamespaceLister
	ObjectSearchServiceListerExpansion
}

// objectSearchServiceLister implements the ObjectSearchServiceLister interface.
type objectSearchServiceLister struct {
	indexer cache.Indexer
}

// NewObjectSearchServiceLister returns a new ObjectSearchServiceLister.
func NewObjectSearchServiceLister(indexer cache.Indexer) ObjectSearchServiceLister {
	return &objectSearchServiceLister{indexer: indexer}
}

// List lists all ObjectSearchServices in the indexer.
func (s *objectSearchServiceLister) List(selector labels.Selector) (ret []*v1alpha1.ObjectSearchService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObjectSearchService))
	})
	return ret, err
}

// ObjectSearchServices returns an object that can list and get ObjectSearchServices.
func (s *objectSearchServiceLister) ObjectSearchServices(namespace string) ObjectSearchServiceNamespaceLister {
	return objectSearchServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ObjectSearchServiceNamespaceLister helps list and get ObjectSearchServices.
// All objects returned here must be treated as read-only.
type ObjectSearchServiceNamespaceLister interface {
	// List lists all ObjectSearchServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObjectSearchService, err error)
	// Get retrieves the ObjectSearchService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ObjectSearchService, error)
	ObjectSearchServiceNamespaceListerExpansion
}

// objectSearchServiceNamespaceLister implements the ObjectSearchServiceNamespaceLister
// interface.
type objectSearchServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ObjectSearchServices in the indexer for a given namespace.
func (s objectSearchServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ObjectSearchService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObjectSearchService))
	})
	return ret, err
}

// Get retrieves the ObjectSearchService from the indexer for a given namespace and name.
func (s objectSearchServiceNamespaceLister) Get(name string) (*v1alpha1.ObjectSearchService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("objectsearchservice"), name)
	}
	return obj.(*v1alpha1.ObjectSearchService), nil
}
