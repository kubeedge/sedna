/*
Copyright The KubeEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubeedge/sedna/pkg/apis/sedna/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LLMJointInferenceServiceLister helps list LLMJointInferenceServices.
// All objects returned here must be treated as read-only.
type LLMJointInferenceServiceLister interface {
	// List lists all LLMJointInferenceServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LLMJointInferenceService, err error)
	// LLMJointInferenceServices returns an object that can list and get LLMJointInferenceServices.
	LLMJointInferenceServices(namespace string) LLMJointInferenceServiceNamespaceLister
	LLMJointInferenceServiceListerExpansion
}

// lLMJointInferenceServiceLister implements the LLMJointInferenceServiceLister interface.
type lLMJointInferenceServiceLister struct {
	indexer cache.Indexer
}

// NewLLMJointInferenceServiceLister returns a new LLMJointInferenceServiceLister.
func NewLLMJointInferenceServiceLister(indexer cache.Indexer) LLMJointInferenceServiceLister {
	return &lLMJointInferenceServiceLister{indexer: indexer}
}

// List lists all LLMJointInferenceServices in the indexer.
func (s *lLMJointInferenceServiceLister) List(selector labels.Selector) (ret []*v1alpha1.LLMJointInferenceService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LLMJointInferenceService))
	})
	return ret, err
}

// LLMJointInferenceServices returns an object that can list and get LLMJointInferenceServices.
func (s *lLMJointInferenceServiceLister) LLMJointInferenceServices(namespace string) LLMJointInferenceServiceNamespaceLister {
	return lLMJointInferenceServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LLMJointInferenceServiceNamespaceLister helps list and get LLMJointInferenceServices.
// All objects returned here must be treated as read-only.
type LLMJointInferenceServiceNamespaceLister interface {
	// List lists all LLMJointInferenceServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LLMJointInferenceService, err error)
	// Get retrieves the LLMJointInferenceService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LLMJointInferenceService, error)
	LLMJointInferenceServiceNamespaceListerExpansion
}

// lLMJointInferenceServiceNamespaceLister implements the LLMJointInferenceServiceNamespaceLister
// interface.
type lLMJointInferenceServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LLMJointInferenceServices in the indexer for a given namespace.
func (s lLMJointInferenceServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LLMJointInferenceService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LLMJointInferenceService))
	})
	return ret, err
}

// Get retrieves the LLMJointInferenceService from the indexer for a given namespace and name.
func (s lLMJointInferenceServiceNamespaceLister) Get(name string) (*v1alpha1.LLMJointInferenceService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("llmjointinferenceservice"), name)
	}
	return obj.(*v1alpha1.LLMJointInferenceService), nil
}
