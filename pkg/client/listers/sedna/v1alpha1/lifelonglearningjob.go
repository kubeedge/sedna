/*
Copyright The KubeEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubeedge/sedna/pkg/apis/sedna/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LifelongLearningJobLister helps list LifelongLearningJobs.
// All objects returned here must be treated as read-only.
type LifelongLearningJobLister interface {
	// List lists all LifelongLearningJobs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LifelongLearningJob, err error)
	// LifelongLearningJobs returns an object that can list and get LifelongLearningJobs.
	LifelongLearningJobs(namespace string) LifelongLearningJobNamespaceLister
	LifelongLearningJobListerExpansion
}

// lifelongLearningJobLister implements the LifelongLearningJobLister interface.
type lifelongLearningJobLister struct {
	indexer cache.Indexer
}

// NewLifelongLearningJobLister returns a new LifelongLearningJobLister.
func NewLifelongLearningJobLister(indexer cache.Indexer) LifelongLearningJobLister {
	return &lifelongLearningJobLister{indexer: indexer}
}

// List lists all LifelongLearningJobs in the indexer.
func (s *lifelongLearningJobLister) List(selector labels.Selector) (ret []*v1alpha1.LifelongLearningJob, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LifelongLearningJob))
	})
	return ret, err
}

// LifelongLearningJobs returns an object that can list and get LifelongLearningJobs.
func (s *lifelongLearningJobLister) LifelongLearningJobs(namespace string) LifelongLearningJobNamespaceLister {
	return lifelongLearningJobNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LifelongLearningJobNamespaceLister helps list and get LifelongLearningJobs.
// All objects returned here must be treated as read-only.
type LifelongLearningJobNamespaceLister interface {
	// List lists all LifelongLearningJobs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LifelongLearningJob, err error)
	// Get retrieves the LifelongLearningJob from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LifelongLearningJob, error)
	LifelongLearningJobNamespaceListerExpansion
}

// lifelongLearningJobNamespaceLister implements the LifelongLearningJobNamespaceLister
// interface.
type lifelongLearningJobNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LifelongLearningJobs in the indexer for a given namespace.
func (s lifelongLearningJobNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LifelongLearningJob, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LifelongLearningJob))
	})
	return ret, err
}

// Get retrieves the LifelongLearningJob from the indexer for a given namespace and name.
func (s lifelongLearningJobNamespaceLister) Get(name string) (*v1alpha1.LifelongLearningJob, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lifelonglearningjob"), name)
	}
	return obj.(*v1alpha1.LifelongLearningJob), nil
}
